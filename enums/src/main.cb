namespace test.io {
  system "sys/syscall.h" {
    fn syscall(rax: int, fd: int, buf: string, count: int): int;
  }

  unsafe fn sys_print(data: string, length: int): int {
    return syscall(1i, 1i, data, length);
  }

  export unsafe fn log(data: string): int {
    store input = data.concat("\n");
    return sys_print(input, input.length());
  }
}

namespace App {
  using test.io;

  struct ItemOne {
    name: string;
  }

  struct ItemTwo {
    fullname: string;
  }

  enum Test {
    one: ItemOne;
    two: ItemTwo;
  }

  fn TestItem(item: Test): string {
    return match (item as matched) {
      one: {
        return matched.name;
      },
      two: {
        return matched.fullname;
      }
    };
  }

  export unsafe fn main(): int {
    store one_test = pick Test.one {
      return make ItemOne { assign name = "Test Name"; };
    };
    store two_test = pick Test.two {
      return make ItemTwo { assign fullname = "Test Full Name"; };
    };

    side one_test.TestItem().log();
    side two_test.TestItem().log();

    return 0i;
  }
}